Given a list of non-negative integers nums, arrange them such that they form the largest number.

Note: The result may be very large, so you need to return a string instead of an integer.

 

Example 1:

Input: nums = [10,2]
Output: "210"
Example 2:

Input: nums = [3,30,34,5,9]
Output: "9534330"
Example 3:

Input: nums = [1]
Output: "1"
Example 4:

Input: nums = [10]
Output: "10"
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 109




Solution:
Step 1: We need pick the numbers with greater values in the 0th positions and put those in the buckets of respective values at 0th position.That is 9's followed by 8's and so on.
Step 2: We need to sort the buckets in such a away that the numbers with 1st results have greater values.
Step 3: Join those numbers from buckets from the bottom.

  public String largestNumber(int[] nums) {
      
      
           StringBuilder sb = new StringBuilder();
           //Step 1:
           ArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();
           for(int i=0;i<=9;i++)
           {
               list.add(new ArrayList<Integer>());
           }
           int firstDigit;
           for(int num : nums)
           {
               firstDigit = Integer.parseInt(Integer.toString(num).substring(0, 1));
               list.get(firstDigit).add(num);
           }
           //Step 2:
           list.stream().forEach(element -> Collections.sort(element,new Comparator<Integer>(){
               public int compare(Integer i1, Integer i2)
               {
                   String i1string = i1.toString();
                   String i2string = i2.toString();
                   if(i1string.equals(i2string))
                      return 0;
                   else if(i1string.length()==1)
                   {
                           for(char ch : i2string.toCharArray())
                           {
                               if(Integer.parseInt(Character.toString(ch)) < i1)
                                  return 1;
                           }
                           return -1;
                   }
                   else if(i2string.length()==1)
                   {
                           for(char ch : i1string.toCharArray())
                           {
                               if(Integer.parseInt(Character.toString(ch)) < i2)
                                  return -1;
                           }
                           return 1;
                   }
                   else
                        return i1string.compareTo(i2string);
           }
           }));
           list.stream().forEachOrdered(System.out::println);
           //Step 3:
           for(int i=9;i>=0;i--)
           {
               for(int j=list.get(i).size()-1;j>=0;j--)
               {
                   sb.append(list.get(i).get(j).toString());
               }
           }
           int k;
           for(k=0;k<sb.toString().length();k++)
               if(sb.toString().charAt(k)!='0')
                   break;
           if(k==sb.toString().length())
               k--;
           return sb.toString().substring(k);
    } 
